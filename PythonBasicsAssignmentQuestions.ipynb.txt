{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aGFv9RVKqoXd"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python Basics Questions\n",
        "\n",
        "1. What is Python, and why is it popular?\n",
        "Python is a high-level, interpreted, and dynamically typed programming language known for its simplicity and readability. It is popular due to its vast standard libraries, wide range of applications (web development, data analysis, AI, etc.), and supportive community.\n",
        "\n",
        "\n",
        "2. What is an interpreter in Python?\n",
        "An interpreter is a program that executes Python code line-by-line, converting it into machine-readable instructions at runtime.\n",
        "\n",
        "\n",
        "3. What are pre-defined keywords in Python?\n",
        "Keywords are reserved words in Python that have a predefined meaning and purpose, such as if, else, while, and def. They cannot be used as variable names.\n",
        "\n",
        "\n",
        "4. Can keywords be used as variable names?\n",
        "No, keywords cannot be used as variable names because they are reserved for specific functions in Python.\n",
        "\n",
        "\n",
        "5. What is mutability in Python?\n",
        "Mutability refers to the ability of an object to be modified after its creation. Mutable objects, like lists, can change their contents, whereas immutable objects, like tuples, cannot.\n",
        "\n",
        "\n",
        "6. Why are lists mutable, but tuples are immutable?\n",
        "Lists are designed for dynamic storage and modification of elements, allowing changes. Tuples, on the other hand, are immutable to ensure data consistency and are optimized for performance.\n",
        "\n",
        "\n",
        "7. What is the difference between \"==\" and \"is\" operators in Python?\n",
        "\n",
        "==: Compares the values of two objects.\n",
        "\n",
        "is: Checks if two objects refer to the same memory location.\n",
        "\n",
        "\n",
        "\n",
        "8. What are logical operators in Python?\n",
        "Logical operators are used to combine conditional statements:\n",
        "\n",
        "and: Returns True if both conditions are true.\n",
        "\n",
        "or: Returns True if at least one condition is true.\n",
        "\n",
        "not: Inverts the Boolean value of the condition.\n",
        "\n",
        "\n",
        "\n",
        "9. What is type casting in Python?\n",
        "Type casting is the conversion of a variable from one data type to another, either explicitly or implicitly.\n",
        "\n",
        "\n",
        "10. What is the difference between implicit and explicit type casting?\n",
        "\n",
        "Implicit: Python automatically converts data types where safe.\n",
        "\n",
        "Explicit: The programmer manually converts data types using functions like int(), float(), etc.\n",
        "\n",
        "\n",
        "\n",
        "11. What is the purpose of conditional statements in Python?\n",
        "Conditional statements allow a program to make decisions and execute different code blocks based on conditions.\n",
        "\n",
        "\n",
        "12. How does the elif statement work?\n",
        "The elif statement checks multiple conditions sequentially. If the condition is True, it executes the corresponding block and skips the rest.\n",
        "\n",
        "\n",
        "13. What is the difference between for and while loops?\n",
        "\n",
        "for: Iterates over a sequence or range.\n",
        "\n",
        "while: Repeats as long as a condition is true.\n",
        "\n",
        "\n",
        "\n",
        "14. Describe a scenario where a while loop is more suitable than a for loop.\n",
        "A while loop is suitable when the number of iterations is not known beforehand, such as reading user input until a valid response is entered."
      ],
      "metadata": {
        "id": "z9Ybj6Rcrclb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Practical Questions\n",
        "\n",
        "#1. Print \"Hello, World!\"\n",
        "\n",
        "print(\"Hello, World!\")\n",
        "\n",
        "\n",
        "#2. Display your name and age.\n",
        "\n",
        "name = \"Alfaz Ahmad\"\n",
        "age = 21\n",
        "print(f\"My name is {name} and I am {age} years old.\")\n",
        "\n",
        "\n",
        "#3. Print all pre-defined keywords.\n",
        "\n",
        "import keyword\n",
        "print(keyword.kwlist)\n",
        "\n",
        "\n",
        "#4. Check if a word is a Python keyword.\n",
        "\n",
        "import keyword\n",
        "word = input(\"Enter a word: \")\n",
        "if keyword.iskeyword(word):\n",
        "    print(f\"{word} is a Python keyword.\")\n",
        "else:\n",
        "    print(f\"{word} is not a Python keyword.\")\n",
        "\n",
        "\n",
        "#5. List and tuple immutability.\n",
        "\n",
        "my_list = [1, 2, 3]\n",
        "my_tuple = (1, 2, 3)\n",
        "my_list[0] = 0  # Works\n",
        "# my_tuple[0] = 0  # Raises an error\n",
        "\n",
        "\n",
        "#6. Mutable and immutable arguments.\n",
        "\n",
        "def modify(data):\n",
        "    if isinstance(data, list):\n",
        "        data.append(4)\n",
        "    else:\n",
        "        data += \" world\"\n",
        "mutable = [1, 2, 3]\n",
        "immutable = \"hello\"\n",
        "modify(mutable)\n",
        "modify(immutable)\n",
        "print(mutable)  # [1, 2, 3, 4]\n",
        "print(immutable)  # hello (unchanged)\n",
        "\n",
        "\n",
        "#7. Logical operators usage.\n",
        "\n",
        "a, b = 5, 10\n",
        "print(a > 0 and b > 0)\n",
        "print(a < 0 or b > 0)\n",
        "print(not (a == b))\n",
        "\n",
        "\n",
        "#8. Convert string to other types.\n",
        "\n",
        "user_input = input(\"Enter a number: \")\n",
        "print(int(user_input), float(user_input), bool(user_input))\n",
        "\n",
        "\n",
        "#9. Type casting with list elements.\n",
        "\n",
        "lst = [\"1\", \"2\", \"3\"]\n",
        "int_lst = [int(i) for i in lst]\n",
        "print(int_lst)\n",
        "\n",
        "\n",
        "#10. Check positive, negative, or zero.\n",
        "\n",
        "num = int(input(\"Enter a number: \"))\n",
        "if num > 0:\n",
        "    print(\"Positive\")\n",
        "elif num < 0:\n",
        "    print(\"Negative\")\n",
        "else:\n",
        "    print(\"Zero\")\n",
        "\n",
        "\n",
        "#11. For loop from 1 to 10.\n",
        "\n",
        "for i in range(1, 11):\n",
        "    print(i)\n",
        "\n",
        "\n",
        "#12. Sum of even numbers from 1 to 50.\n",
        "\n",
        "total = sum(i for i in range(1, 51) if i % 2 == 0)\n",
        "print(total)\n",
        "\n",
        "\n",
        "#13. Reverse a string using a while loop.\n",
        "\n",
        "s = input(\"Enter a string: \")\n",
        "result = \"\"\n",
        "i = len(s) - 1\n",
        "while i >= 0:\n",
        "    result += s[i]\n",
        "    i -= 1\n",
        "print(result)\n",
        "\n",
        "\n",
        "#14. Factorial of a number using while loop.\n",
        "\n",
        "num = int(input(\"Enter a number: \"))\n",
        "factorial = 1\n",
        "while num > 0:\n",
        "    factorial *= num\n",
        "    num -= 1\n",
        "print(f\"Factorial is {factorial}\")\n",
        "\n",
        "#15. Write a Python program to calculate the factorial of a number provided by the user using a while loop.\n",
        "# Get the number from the user\n",
        "num = int(input(\"Enter a number to calculate its factorial: \"))\n",
        "\n",
        "# Initialize the factorial to 1\n",
        "factorial = 1\n",
        "\n",
        "# Check if the number is negative, zero, or positive\n",
        "if num < 0:\n",
        "    print(\"Factorial does not exist for negative numbers.\")\n",
        "elif num == 0:\n",
        "    print(\"The factorial of 0 is 1.\")\n",
        "else:\n",
        "    # Calculate factorial using a while loop\n",
        "    while num > 0:\n",
        "        factorial *= num\n",
        "        num -= 1\n",
        "    print(f\"The factorial is {factorial}\")"
      ],
      "metadata": {
        "id": "PkrIsieEriRa"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}